/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.BloodBank;

import Buisness.Bloodbank.Inventory.BloodBankInventoryDirectory;
import Buisness.Bloodbank.Organisation.InchargeOrganisation;
import Buisness.EcoSystem;
import Buisness.Enterprise.BloodbankEnterprise;
import Buisness.Enterprise.Enterprise;
import Buisness.Network.Network;
import Buisness.Organisation.Organisation;
import Buisness.UserAccount.UserAccount;
import Buisness.WorkQueue.BloodInchargeNurseWorkQueue;
import Buisness.WorkQueue.NurseBloodInchargeWorkQueue;
import Buisness.WorkQueue.WorkRequest;
import Business.Hospital.Organisation.NurseOrganisation;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aviti
 */
public class BloodBankInchargeWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BloodBankInchargeWorkAreaJPanel
     */
   
    private JPanel displayJPanel;
    private UserAccount userAccount;
    private InchargeOrganisation organisation;
    private EcoSystem system;
    private Network net;
    private BloodbankEnterprise enterprise;
    private UserAccount acc;
    private BloodBankInventoryDirectory bbid;

    public BloodBankInchargeWorkAreaJPanel(JPanel displayJPanel, UserAccount userAccount, InchargeOrganisation organisation, BloodbankEnterprise enterprise, Network network, EcoSystem business) {
               
       
        initComponents();
        this.displayJPanel=displayJPanel;
        this.organisation = organisation;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.system = business;
        this.net=network;
        this.acc=userAccount;
        this.bbid = this.organisation.getBbinventoryDirectory();
                
        populateTable();
    }
   
    
    
    public void populateTable()
    {
        DefaultTableModel model = (DefaultTableModel) BloodBankJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request :net.getBloodBankRequests().getWorkRequestList())
        {
            NurseBloodInchargeWorkQueue nb = (NurseBloodInchargeWorkQueue)request;
            Object[] row = new Object[4];
            row[0] = nb;
            row[1] = nb.getBloodType();
            row[2] = nb.getBloodQuantity();
            row[3]=request.getMessage();
            
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        BloodBankJTable = new javax.swing.JTable();
        lblTitle = new javax.swing.JLabel();
        AcceptjButton = new javax.swing.JButton();
        BackjButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder("View Blood Request"));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BloodBankJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Blood Group", "Quantity Required", "Request Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(BloodBankJTable);
        if (BloodBankJTable.getColumnModel().getColumnCount() > 0) {
            BloodBankJTable.getColumnModel().getColumn(0).setResizable(false);
            BloodBankJTable.getColumnModel().getColumn(1).setResizable(false);
            BloodBankJTable.getColumnModel().getColumn(2).setResizable(false);
            BloodBankJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 122, 545, 137));

        lblTitle.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lblTitle.setText("VIEW BLOOD REQUEST");
        add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 40, -1, 34));

        AcceptjButton.setText("Accept");
        AcceptjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AcceptjButtonActionPerformed(evt);
            }
        });
        add(AcceptjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 314, -1, -1));

        BackjButton.setText("<<Back");
        BackjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackjButtonActionPerformed(evt);
            }
        });
        add(BackjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 314, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void AcceptjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AcceptjButtonActionPerformed
       int selectedRow=BloodBankJTable.getSelectedRow();
       
       if(selectedRow<0)
       {
           JOptionPane.showMessageDialog(null, "Please Select any Record to change","Warning", JOptionPane.WARNING_MESSAGE);
       }
       else
       {
           NurseBloodInchargeWorkQueue  tt = (NurseBloodInchargeWorkQueue)BloodBankJTable.getValueAt(selectedRow, 0);
           boolean result = bbid.checkBloodQuantity(tt.getBloodType(), tt.getBloodQuantity());
           
           if(tt.getMessage().equals("Blood Supplied"))
           {
               JOptionPane.showMessageDialog(null, "Blood Already Supplied ","Warning", JOptionPane.WARNING_MESSAGE);
           }
           
           else if(result == true)
           {
                    tt.setMessage("Blood Supplied");
                    populateTable();
                
                    BloodInchargeNurseWorkQueue binwq= new BloodInchargeNurseWorkQueue();
                             
                    binwq.setSender(acc);
                    binwq.setStatus("Blood Supplied");
                    binwq.setBloodType(tt.getBloodType());
                    binwq.setPatientName(tt.getPatientName());
                    binwq.setBloodQuantity(String.valueOf(tt.getBloodQuantity()));
                
             
                    NurseOrganisation bb = null;
                    for(Network network : system.getNetworkList())
                    {
                        if(network.getName().equals(net.getName()))
                        {
                            for(Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList())
                            {
                                for(Organisation org : ent.getOrganizationDirectory().getOrganizationList())
                                {
                                    if(org.getName().equalsIgnoreCase("Nurse Organisation"))
                                    {
                                        for(UserAccount uacnt : org.getUserAccountDirectory().getUserAccountList())
                                        {
                                            if(uacnt.getUsername().equalsIgnoreCase(tt.getSender().getUsername()))
                                            {
                                                bb = (NurseOrganisation)org;
                                                break;
                                            }
                                        }
                                    }
                                }   
                            }
                    
                            if (bb!= null)
                            {
                                bb.getBloodInchargeNurseWQ().getWorkRequestList().add(binwq);
                                userAccount.getWorkQueue().getWorkRequestList().add(binwq);
                            }   
                
                            JOptionPane.showMessageDialog(null, "Posted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                        }      
                    }
                }
           
           else
           {
               JOptionPane.showMessageDialog(null, "Sufficient blood quantity not available at present for this blood group", "Warning", JOptionPane.WARNING_MESSAGE);
           }
        } 
    }//GEN-LAST:event_AcceptjButtonActionPerformed

    private void BackjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackjButtonActionPerformed

        displayJPanel.remove(this);
        CardLayout layout = (CardLayout) displayJPanel.getLayout();
        layout.previous(displayJPanel);
    }//GEN-LAST:event_BackjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AcceptjButton;
    private javax.swing.JButton BackjButton;
    private javax.swing.JTable BloodBankJTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    // End of variables declaration//GEN-END:variables

    
}
